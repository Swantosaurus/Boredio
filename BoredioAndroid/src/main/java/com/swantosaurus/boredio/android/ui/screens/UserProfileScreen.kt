package com.swantosaurus.boredio.android.ui.screens

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottomAxis
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStartAxis
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberColumnCartesianLayer
import com.patrykandpatrick.vico.compose.cartesian.rememberCartesianChart
import com.patrykandpatrick.vico.compose.cartesian.rememberVicoZoomState
import com.patrykandpatrick.vico.core.cartesian.axis.BaseAxis
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.CartesianValueFormatter
import com.patrykandpatrick.vico.core.cartesian.data.columnSeries
import com.swantosaurus.boredio.android.ui.util.relativeToDay
import com.swantosaurus.boredio.screenViewModels.AccountViewModel
import com.swantosaurus.boredio.screenViewModels.CompletedActivities
import org.koin.androidx.compose.koinViewModel
import kotlin.math.roundToInt


@Composable
fun UserProfileScreen(
    accountViewModel: AccountViewModel = koinViewModel()
) {
    val completed by accountViewModel.completed.collectAsState()
    val imagesGenerated by accountViewModel.imagesGenerated.collectAsState()
    val totalImageSpace by accountViewModel.totalImageSpace.collectAsState()
    val totalDownloadedActivities by accountViewModel.totalDownloadedActivities.collectAsState()

    LaunchedEffect(Unit) {
        accountViewModel.loadData()
    }
    UserProfileScreenBody(
        completed = completed,
        imagesGenerated = imagesGenerated,
        totalImageSpace = totalImageSpace,
        totalDownloadedActivities = totalDownloadedActivities
    )
}

@Composable
fun UserProfileScreenBody(
    completed: CompletedActivities,
    imagesGenerated: Int,
    totalImageSpace: String,
    totalDownloadedActivities: Int
) {
    CompleteGraph(completed = completed)
}

@Composable()
private fun CompleteGraph(completed: CompletedActivities) {
    val ctx = LocalContext.current
    val producer = remember {
        CartesianChartModelProducer.build()
    }
    LaunchedEffect(completed) {
        producer.tryRunTransaction {
            columnSeries {
                series(y = completed.getDays())
            }
        }
    }

    CartesianChartHost(
        modifier = Modifier
            .fillMaxWidth()
            .height(300.dp), chart = rememberCartesianChart(
            rememberColumnCartesianLayer(),
            startAxis = rememberStartAxis(sizeConstraint = BaseAxis.SizeConstraint.Exact(40f)),

            bottomAxis = rememberBottomAxis(
                valueFormatter = CartesianValueFormatter { value, _, _ ->
                    value.roundToInt().relativeToDay(ctx)
                }
            )
        ), modelProducer = producer,
        zoomState = rememberVicoZoomState(zoomEnabled = false)
    )
}

